# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

{{- if eq .AppSpec.Type "statefulset" }}

{{- $watchdogImage := printf "gcr.io/%s/webrtc-gpu-streaming-watchdog:latest" .ProjectID}}
{{- if .AppParams.watchdogImage}}
  {{- $watchdogImage = .AppParams.watchdogImage}}
{{- end}}

{{- $enableAudio := false}}
{{- if .AppParams.enableAudio }}
  {{- if eq .AppParams.enableAudio "true"}}
    {{- $enableAudio = true }}
  {{- end}}
{{- end}}
{{- if .UserParams.enableAudio }}
  {{- if eq .UserParams.enableAudio "true"}}
    {{- $enableAudio = true }}
  {{- end}}
{{- end}}

apiVersion: v1
kind: Service
metadata:
  name: vdi
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: vdi
  ports:
    # Port 80 is the default port routed by the pod broker.
    - port: 80
      name: http-web
      targetPort: 8082
    - port: 8082
      name: http-webrtc
      targetPort: 8082
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: vdi
  annotations:
    gke.accel.vdi/user: "{{.User}}"
spec:
  selector:
    matchLabels:
      app: vdi
  serviceName: vdi
  replicas: 1
  volumeClaimTemplates: []
  template:
    metadata:
      annotations:
        gke.accel.vdi/user: "{{.User}}"
        app.broker/session-key: "{{default "" .AppParams.sessionKey}}"
      labels:
        app: vdi
    spec:
      serviceAccount: {{.Namespace}}

      {{- if .PullSecrets }}
      imagePullSecrets:
      {{- range $secretName := .PullSecrets }}
      - name: {{$.FullName}}-{{ $secretName }}
      {{- end}}
      {{- end}}

      enableServiceLinks: false

      # Disable service account used for accessing the kubernetes API/
      automountServiceAccountToken: false

      nodeSelector:
        app.broker/tier: {{ .NodeTier.NodeLabel }}
        cloud.google.com/gke-nodepool: "{{ .NodeTier.NodeLabel }}"
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: app.broker/initialized
                    operator: In
                    values: ["true"]
      
      tolerations:
        - key: "app.broker/tier"
          effect: "NoSchedule"
          operator: "Exists"
        - key: "app.broker/node-init"
          effect: "NoSchedule"
          operator: "Exists"

      # Terminate pod after 10 seconds of receiving SIGTERM
      terminationGracePeriodSeconds: 5
      volumes:
        ###
        # shared x11 socket volume
        ###
        - name: x11
          emptyDir:
            medium: Memory
            sizeLimit: 10Mi
        ###
        # Shared config volume
        ###
        - name: config
          emptyDir:
            medium: Memory
            sizeLimit: 10Mi
        ###
        # shared memory mount
        # used to bypass default container runtime of 64MB
        ###
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
      initContainers: []
      containers:
        ###
        # Desktop container
        ###
        - name: desktop
          image: {{.ImageRepo}}:{{.ImageTag}}
          imagePullPolicy: Always
          # Allow entrypoint command override from app config spec.
          {{- if .AppParams.command}}
          command: ["/bin/bash", "-c"]
          args:
            - |
{{.AppParams.command | nindent 14}}
          {{- end}}
          securityContext:
            privileged: false
            runAsUser: 1000
            runAsGroup: 1000
          env:
            - name: VDI_USER
              value: "{{.User}}"
            - name: LD_LIBRARY_PATH
              value: "/usr/local/nvidia/lib64:/usr/local/nvidia/lib32"
            - name: PULSE_SERVER
              value: "127.0.0.1:4713"
            
            # Add the userParams to the env prefixed with VDI_
            {{- range $key, $value := .UserParams }}
            - name: VDI_{{ $key }}
              value: {{ quote $value }}
            {{- end}}

            # Add environment vars from brokerappconfig spec.
            {{- range $item := .AppSpec.AppEnv }}
            - name: {{$item.Name}}
              value: {{ quote $item.Value }}
            {{- end}}

          volumeMounts:
            # Shared pod mount at host for intra-container and cross-pod sharing.
            - name: x11
              mountPath: /tmp/.X11-unix
            # Shared pod mount for intra-container data sharing.
            - name: config
              mountPath: /var/run/appconfig
            # increased shared memory mount
            - name: dshm
              mountPath: /dev/shm
          resources:
            requests: {}
            limits: {}

        ###
        # Watchdog container
        ###
        - name: watchdog
          image: {{$watchdogImage}}
          env: []
          volumeMounts:
            - name: x11
              mountPath: /tmp/.X11-unix
            - name: config
              mountPath: /var/run/appconfig

        ###
        # Pulse audio container
        ###
        - name: pulseaudio
          image: gcr.io/cloud-solutions-images/webrtc-gpu-streaming-pulseaudio:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: pulseaudio
              containerPort: 4713
              protocol: TCP

        ###
        # Xserver container
        ###
        - name: xserver
          image: gcr.io/cloud-solutions-images/webrtc-gpu-streaming-xserver:latest
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
          env:
          - name: VDI_USER
            value: "{{.User}}"
          
          # Add environment vars from brokerappconfig spec.
          {{- range $item := .AppSpec.AppEnv }}
          {{- if eq "RESOLUTION" $item.Name }}
          - name: {{ $item.Name }}
            value: {{ quote $item.Value }}
          {{- end}}
          {{- end}}

          volumeMounts:
            - name: x11
              mountPath: /tmp/.X11-unix
            - name: config
              mountPath: /var/run/appconfig
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "kill $(pidof Xorg tail bash)"]
          resources:
            requests: {}
            limits: {}

        ###
        # webrtc container
        ###
        - name: webrtc
          image: gcr.io/cloud-solutions-images/webrtc-gpu-streaming-gst-webrtc-app:latest
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
          # tty required to gather gpu stats using nvidia-smi and GPUtil python module.
          tty: true
          env:
            - name: GST_DEBUG
              value: "*:2"
            - name: LD_LIBRARY_PATH
              value: "/usr/local/nvidia/lib64:/usr/local/nvidia/cuda/lib64:/usr/local/nvidia/lib32"
            - name: DISPLAY
              value: ":0"
            - name: METRICS_PORT
              value: "8008"
            - name: LISTEN_PORT
              value: "8082"
            - name: "PULSE_SERVER"
              value: "127.0.0.1:4713"
            - name: "COTURN_WEB_USERNAME"
              value: "selkies:server@localhost"
            - name: "COTURN_AUTH_HEADER_NAME"
              value: "x-goog-authenticated-user-email"
            - name: COTURN_WEB_URI
              value: "http://coturn-web.coturn.svc.cluster.local:8080/"
            - name: APP_AUTO_INIT
              value: "{{default "true" .AppParams.appAutoInit}}"
            - name: ENABLE_AUDIO
              value: "{{$enableAudio}}"
            {{- if .AppParams.enableClipboard }}
            - name: ENABLE_CLIPBOARD
              value: "{{.AppParams.enableClipboard}}"
            {{- end}}

            # Add WEBRTC_ prefixed environment vars from brokerappconfig spec.
            {{- range $item := .AppSpec.AppEnv }}
            {{- if hasPrefix "WEBRTC_" $item.Name }}
            - name: {{ $item.Name }}
              value: {{ quote $item.Value }}
            {{- end}}
            {{- end}}

            # Add app context for PWA manifest
            - name: PWA_APP_NAME
              value: {{.AppSpec.DisplayName | quote}}
            - name: PWA_APP_PATH
              value: {{.App | quote}}
            - name: PWA_ICON_URL
              value: {{.AppSpec.Icon | quote}}

          volumeMounts:
            - name: x11
              mountPath: /tmp/.X11-unix
            - name: config
              mountPath: /var/run/appconfig
          resources:
            requests: {}
            limits: {}

        ###
        # WebRTC metrics exporter container
        # TODO
        ###
        #- name: webrtc-metrics
        #  image: gcr.io/google-containers/prometheus-to-sd:v0.7.2
        #  command:
        #    - /monitor
        #    - --source=:http://localhost:8008
        #    - --stackdriver-prefix=custom.googleapis.com
        #    - --pod-id=$(POD_NAME)
        #    - --namespace-id=$(POD_NAMESPACE)
        #  env:
        #    - name: POD_NAME
        #      valueFrom:
        #        fieldRef:
        #          apiVersion: v1
        #          fieldPath: metadata.name
        #    - name: POD_NAMESPACE
        #      valueFrom:
        #        fieldRef:
        #          fieldPath: metadata.namespace
{{- end}}